"""

Analysis.py - analyses for dhmit/rereading wired into the webapp

"""

from .models import StudentReadingData, SegmentQuestionResponse


class RereadingAnalysis:
    """
    This class loads all StudentReadingData objects from the db,
    and implements analysis methods on these responses.
    """

    def __init__(self):
        pass
        self.readings = StudentReadingData.objects.all()

    @staticmethod
    def transform_nested_dict_to_list(nested_dict):
        """
        Transforms a nested dictionary data structure into a flat array of tuples in the form
        (key1, key2, value).
        :param nested_dict: the map generated by
        students_using_relevant_words_by_context_and_question
        :return a list of tuples in the form (context, question, data)
        """
        flattened_list = []
        for key1, inner_keys in nested_dict.items():
            for key2, value in inner_keys.items():
                flattened_list.append((key1, key2, value))
        return flattened_list

    def relevant_words_by_question(self):
    """
            Return a list of tuples of the form (question,count), where count is
            the number of students who used relevant words in that question. This list
            is sorted by question
            :return the return type explained in the function description
            """
    relevant_words = ["dead", "death", "miscarriage", "killed", "kill", "losing", "loss",
                      "lost", "deceased", "died", "grief", "pregnancy", "pregnant"]

    question_context_count_map = {}

    for q in SegmentQuestionResponse.objects.all():
        question = q.question.text
        context = q.context.text
        if question not in question_context_count_map:
            question_context_count_map[question] = {}
        if context not in question_context_count_map[question]:
            question_context_count_map[question][context] = 0

        if RereadingAnalysis.description_has_relevant_words(
            row.response,
            relevant_words):
            question_context_count_map[question][context] += 1

    flattened_data = \
        RereadingAnalysis.transform_nested_dict_to_list(question_context_count_map)

    flattened_data.sort()
    return flattened_data


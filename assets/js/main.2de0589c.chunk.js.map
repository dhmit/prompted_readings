{"version":3,"sources":["common.js","prototype/student_view.js","prototype/instructor_view.js","prototype/analysis_view.js","views/reading_view.js","views/landing_page.js","views/overview_view.js","views/analysis_view.js","index.js"],"names":["getCookie","name","cookieValue","document","cookie","cookies","split","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","trim","substring","length","decodeURIComponent","err","return","TimeIt","Object","classCallCheck","this","start","Date","now","end","time","createClass","key","propTypes","onScroll","PropTypes","func","onSubmit","onChange","answer","string","word_limit","number","Footer","_React$Component","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","react_default","a","createElement","className","href","src","alt","React","Component","Spinner","_React$Component2","role","ContinueBtn","props","onClick","Question","question","Story","story_text","Context","context","Response","type","goBack","GoBack","continue","WordAlert","word_alert","PrototypeStudentView","_this","call","state","contexts","questions","context_number","question_number","answers","finished","textInput","views","show_story","show_context","show_question","show_response","show_go_back","timer","scrollTop","scroll_ups","scrolling_up","csrftoken","_componentDidMount","asyncToGenerator","regenerator_default","mark","_callee","json","wrap","_context","prev","fetch","sent","setState","t0","console","log","stop","data","student_responses","JSON","stringify","method","body","headers","Content-type","X-CSRFToken","then","res","response","catch","e","target","preventDefault","slice","validateSubmission","text","push","view_list","parse","_this2","storyButtonClick","scroll_top","current_scrollTop","handleStoryScroll","contextButtonClick","backButtonClick","continueButtonClick","student_view_Question","questionButtonClick","handleSubmit","handleFormChange","postData","handleStartClick","Student","responses","map","StudentResponse","id","story","QuestionView","students","i","response_num","context_pairing","question_key","questionsToView","context_num","prototype","hasOwnProperty","String","instructor_view_Question","indices","index","instructor_view_QuestionResponse","student","prompt_num","QuestionResponse","student_response","PrototypeInstructorView","_React$Component3","_this3","loaded","sortBy","handleChange","bind","assertThisInitialized","event","tempStudents","sort","b","toLowerCase","sorter","SingleValueAnalysis","display_value","round_digits","toFixed","header","unit","TabularAnalysis","n","Array","from","keys","title","k","entry","FrequencyFeelingTable","_React$Component4","analysis_view_TabularAnalysis","feelings","ContextVsViewTime","_React$Component5","roundedViewTimes","entries","viewTime","Math","round","SentimentScores","_React$Component6","analysis_view_SingleValueAnalysis","sentiment_average","sentiment_std","MeanReadingTimesForQuestions","_React$Component7","mean_reading_times_for_questions","RereadCountTable","_React$Component8","run_compute_reread_counts","RelevantWordPercentages","_React$Component9","rawData","formattedData","_ref3","_ref2","slicedToArray","decimal","concat","relevantWords","formatDataWithPercentSign","entryData","PrototypeAnalysisView","_React$Component10","analysis","_this$state$analysis","total_view_time","run_mean_reading_analysis_for_questions","frequency_feelings","context_vs_read_time","question_sentiment_analysis","compute_median_view_time","compute_mean_response_length","percent_using_relevant_words_by_question","analysis_view_SentimentScores","analysis_view_MeanReadingTimesForQuestions","analysis_view_RereadCountTable","analysis_view_FrequencyFeelingTable","analysis_view_ContextVsViewTime","analysis_view_RelevantWordPercentages","VIEWS","INSTRUCTIONS_NAME","READING","OVERVIEW","Segment","segment_lines","ref","segment_ref","handleScroll","onMouseUp","handleSelectionDragEnd","line","ems","evidenceModeState","evidenceModeActive","active","question_id","is_document_question","evidence","response_text","rows","handleResponseChange","require_evidence","evidence_text","handleRemoveEvidence","toggleAddEvidenceMode","NavBar","on_last_segment_and_rereading","segment_num","document_segments","rereading","Fragment","toOverview","nextSegment","OverviewQuestionDisplay","q_and_r","question_and_response","q","r","OverviewView","full_document_text","all_segments","el","reading_data","rereadings","segment_data","filter","datum","is_rereading","all_responses","segment_responses","all_questions","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","segment_questions","question_and_responses","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_loop","find","_iterator3","segment_text_array","reading_view_OverviewQuestionDisplay","window","location","InstructionsNameView","handleStudentName","startReading","ReadingView","_this4","current_view","student_name","segments_viewed","interval_timer","segmentQuestionNum","segmentResponseArray","documentResponseArray","current_selection","scroll_data","createRef","allQuestionsAreCompleted","buildQuestionFields","_startReading","response_json","_this5","setInterval","recordScroll","sendData","_sendData","_callee2","firstTime","new_reading_data","_context2","reading_data_id","segments","view_time","document_responses","_x","update_dict","response_segment","updateResponseObject","responseArray","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_this$getOrCreateResp","getOrCreateResponseObjectAndArray","_this$getOrCreateResp2","assign","doc","document_questions","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_loop2","v","dq","_iterator5","_ret","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_loop3","sq","_iterator6","_ret2","segment_dom_el","current","scroll_remaining","scrollHeight","abs","offsetHeight","gotoSegment","checkScrolledToBottom","alert","scrollTo","target_segment_num","validateData","includes","toString","addEvidence","getSelection","new_evidence_arr","new_evidence","_this$getOrCreateResp3","_this$getOrCreateResp4","evidence_index","_this$getOrCreateResp5","_this$getOrCreateResp6","_this6","_this6$getOrCreateRes","_this6$getOrCreateRes2","reading_view_Question","is_doc_q","q_id","evidence_idx","_this7","reading_view_InstructionsNameView","current_segment","segment_response_fields","document_response_fields","author","reading_view_OverviewView","1","2","3","4","5","reading_view_Segment","reading_view_NavBar","prevSegment","LandingPageView","common_Footer","Navigation_Bar","OverviewContent","overview_view_Navigation_Bar","subtitle","content","ReadingRedux","overview_view_OverviewContent","RereadingSample","RereadingVisuals","RereadingValues","QuantitativeQuestions","Sources","Writeups","writeups","writeup","tagged_text","dangerouslySetInnerHTML","__html","render_one_writeup","formatTime","timeInSeconds","secondsRoundDigits","remainingTime","hours","floor","minutes","seconds","finalFormat","_i","_arr","formatPluralUnits","str","singularUnit","roundedValue","roundDigits","formattedString","TimeAnalysis","time_in_seconds","scroll_range_sort","a_ranges","b_ranges","parseInt","simplify_scroll_range","scroll_ranges","heat_map","prev_scroll","simplified_scroll_ranges","scroll_end","HeatMapAnalysis","documents","document_title","current_document","handleSegmentChange","handleDocumentChange","current_segment_data","max_ranges","num_segments","range","analysis_view_HeatMapSegment","heatMap","segmentNum","HeatMapSegment","readType","finalHeight","handleReadingChange","prevProps","prevState","snapshot","segment_height","heat_data","max_scroll_range","height","max_heat","max","toConsumableArray","values","percentage","heat","style","position","width","top","backgroundColor","zIndex","AnalysisView","_componentDidMount2","common_Spinner","total_and_median_view_time","mean_reading_vs_rereading_time","get_number_of_unique_students","get_all_heat_maps","most_common_words_by_question","sorted_all_responses","a_sequence","a_question_number","b_sequence","b_question_number","analysis_view_TimeAnalysis","analysis_view_HeatMapAnalysis","words","app_modules","ReactDOM"],"mappings":"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","file":"static/js/main.2de0589c.chunk.js","sourcesContent":["/**\n * Common.js -- miscellaneous routines useful throughout the system\n */\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\n/**\n * Get the value of a cookie, given its name\n * Adapted from https://docs.djangoproject.com/en/2.2/ref/csrf/#ajax\n * @param {string} name - The name of the cookie\n */\nexport function getCookie(name) {\n    let cookieValue;\n    if (document.cookie && document.cookie !== '') {\n        const cookies = document.cookie.split(';');\n        for (const raw_cookie of cookies) {\n            const cookie = raw_cookie.trim();\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}\n\n/**\n * This is used as a helper function for keeping track of\n * how long a user has been looking at a story\n */\nexport class TimeIt {\n    constructor() {\n        this.start = Date.now();\n        this.end = null;\n        this.time = 0;\n    }\n\n    /**\n     * This stops the timer and logs how long the timer has been running\n     *\n     * TODO: ensure that the timer has been running,\n     * and that you are not calling stop() back to back\n     */\n    stop() {\n        this.end = Date.now();\n        this.time += this.end - this.start;\n        return this.time / 1000;\n    }\n\n    /**\n     * Restarts the timer while maintaining the current time that was stored,\n     * useful for when someone takes a break or is no longer looking at the proper page\n     */\n    // noinspection JSUnusedGlobalSymbols\n    resume() {\n        this.start = Date.now();\n    }\n}\n\nTimeIt.propTypes = {\n    onScroll: PropTypes.func,\n    onSubmit: PropTypes.func,\n    onChange: PropTypes.func,\n    answer: PropTypes.string,\n    word_limit: PropTypes.number\n};\n\n/**\n * For large enough stories, this function logs how many times the user scrolls up to\n * read a previous portion of the story\n *\n * Note: This only tracks the number of times scrolled up, and not when the user scrolls\n * down to \"advance\" the story\n */\nexport function handleStoryScroll(e, scroll_top, scroll_ups, scrolling_up) {\n    const current_scrollTop = e.target.scrollTop;\n    const prev_scroll = scroll_top;\n    // If the user is scrolling up, log it\n    if (current_scrollTop < prev_scroll && !scrolling_up) {\n        scroll_ups++;\n        scrolling_up = true;\n    } else if (current_scrollTop > prev_scroll && scrolling_up) {\n        scrolling_up = false;\n    }\n    scroll_top = current_scrollTop;\n    console.log(\"We've scrolled! Scroll ups: \", scroll_ups);\n    // For use with the setState function\n    return {scroll_top, scroll_ups, scrolling_up};\n}\n\n// TODO: use set timeout to detect if still scrolling or not. If not, register new scroll position.\n// possible ideas: discrete scroll locations, scroll total, and A STRETCH: cater to lines in the\n// text.\n\n\nexport class Footer extends React.Component {\n    render() {\n        return (\n            <footer className=\"footer bg-white text-dark text-center mt-auto\">\n                <div className=\"container-fluid\">\n                    <div className=\"row\">\n                        <div className=\"col-4 py-3\">\n                            <a href=\"https://digitalhumanities.mit.edu/\">\n                                <img\n                                    src=\"/static/dh_logo.png\"\n                                    className='footer-img'\n                                    alt='Digital Humanities at MIT Logo'\n                                />\n                            </a>\n                        </div>\n                        <div className=\"col-4 py-3\">\n                            <a href=\"https://www.mit.edu/\">\n                                <img\n                                    src=\"/static/mit_logo.svg\"\n                                    className='footer-img'\n                                    alt='MIT Logo'\n                                />\n                            </a>\n                        </div>\n                        <div className=\"col-4 py-3\">\n                            <a href=\"https://www.mellon.org/\">\n                                <img\n                                    src=\"/static/mellon_logo.svg\"\n                                    className='footer-img'\n                                    alt=\"Mellon Foundation Logo\"\n                                />\n                            </a>\n                        </div>\n                    </div>\n                </div>\n            </footer>\n        );\n    }\n}\n\nexport class Spinner extends React.Component {\n    render() {\n        return (\n            <div className=\"loading-spinner\">\n                <div className=\"spinner-border\" role=\"status\">\n                    <span className=\"sr-only\">Loading...</span>\n                </div>\n            </div>\n        );\n    }\n}\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getCookie } from '../common'\nimport './student_view.css';\nimport {TimeIt, handleStoryScroll} from '../common'\n\n\n/**\n * That big fancy blue button at the bottom of the screen, progresses the user to the next page\n */\nfunction ContinueBtn(props) {\n    return (\n        <nav className=\"navbar fixed-bottom\">\n            <button className=\"btn btn-primary btn-lg btn-block\" onClick={props.onClick}>\n                Continue\n            </button>\n        </nav>\n    );\n}\n\nContinueBtn.propTypes = {\n    onClick: PropTypes.func\n};\n\n\n/**\n * Displays the question page to the user, including all relevant progression features\n */\nfunction Question(props) {\n    return (\n        <div className={'question'}>\n            <div className={'question-prompt'}>{props.question}</div>\n            <ContinueBtn onClick={props.onClick}/>\n        </div>\n    );\n}\n\nQuestion.propTypes = {\n    question: PropTypes.string,\n    onClick: PropTypes.func,\n};\n\n\n/**\n * Displays the story page to the user.\n *\n * The story itself is located in a div that tracks when and how the user scrolls.\n *\n * Also contains progression features for moving to the next page\n */\nfunction Story(props) {\n    return (\n        <div className='story'>\n            <div className={'story-box'} onScroll={props.onScroll}>\n                <div className={'story-text'}>{props.story_text}</div>\n            </div>\n            <ContinueBtn onClick={props.onClick}/>\n        </div>\n    );\n}\nStory.propTypes = {\n    story_text: PropTypes.string,\n    onScroll: PropTypes.func,\n    onClick: PropTypes.func,\n};\n\n\n/**\n * Displays the context page to the user, including all relevant progression features\n */\nfunction Context(props) {\n    return (\n        <div className='context'>\n            <div className={'context-text'}>{props.context}</div>\n            <ContinueBtn onClick={props.onClick}/>\n        </div>\n    );\n}\nContext.propTypes = {\n    context: PropTypes.string,\n    onClick: PropTypes.func,\n};\n\n\n/**\n * Page that handles letting the user submit responses.\n *\n * Allows the user to\n *      - go back to view the story/question/etc. if they want to see it again or\n *      - continue once they have a response\n */\nfunction Response(props) {\n    return (\n        <div className='response'>\n            <form onSubmit={props.onSubmit}>\n                <div className='form-group'>\n                    <label className=\"form-control\">{props.question}</label>\n                    <input\n                        type='text' className=\"form-control\"\n                        onChange={props.onChange} value={props.answer}\n                    />\n                </div>\n                <nav className=\"navbar fixed-bottom\">\n                    <div className='btn-group btn-group-lg multi-button'>\n                        <button className='btn btn-secondary' type='submit'>Submit</button>\n                        <button className='btn btn-primary' onClick={props.goBack}>Go Back</button>\n                    </div>\n                </nav>\n            </form>\n        </div>\n    );\n}\nResponse.propTypes = {\n    question: PropTypes.string,\n    answer: PropTypes.string,\n    onSubmit: PropTypes.func,\n    onChange: PropTypes.func,\n    onScroll: PropTypes.func,\n    goBack: PropTypes.func,\n};\n\n\n/**\n * Displays a page allowing the user to go back and see the sequence of prompts again\n * should they need it, or move on if they feel they understand\n */\nfunction GoBack(props) {\n    return (\n        <div className='go-back'>\n            <div>Would you like to see that again?</div>\n            <nav className=\"navbar fixed-bottom\">\n                <div className='btn-group btn-group-lg multi-button'>\n                    <button className='btn btn-secondary' onClick={props.continue}>No</button>\n                    <button className='btn btn-primary' onClick={props.goBack}>Yes</button>\n                </div>\n            </nav>\n        </div>\n    );\n}\nGoBack.propTypes = {\n    continue: PropTypes.func,\n    goBack: PropTypes.func,\n};\n\n\n/**\n * Displays an error message if the user did not follow the guidelines for a response\n *\n * @return {null}\n */\nfunction WordAlert(props) {\n    if (props.word_alert) {\n        return (\n            <div className='word-alert'>\n                <div className='alert alert-danger' role='alert'>\n                    Please make sure to enter a response and respect word limits\n                </div>\n            </div>\n        );\n    } else {\n        return null;\n    }\n}\n\n\n/**\n * Main component for the student view.\n *\n * Handles all logic, displays information, and makes database query/posts\n */\nexport class PrototypeStudentView extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            story_text: null,\n            contexts: [],\n            questions: [],\n            context_number: 0,\n            question_number: 0,\n            answers: [],\n            finished: false,\n            textInput: '',\n            views: '[]', // views is stored as a json string due to Django constraints\n            show_story: false,\n            show_context: false,\n            show_question: false,\n            show_response: false,\n            show_go_back: false,\n            word_alert: false,\n            timer: null,\n            scrollTop: 0,\n            scroll_ups: 0,\n            scrolling_up: false,\n        };\n        this.csrftoken = getCookie('csrftoken');\n    }\n\n    /**\n     * Grabs relevant story information from the server and stores it for displaying later\n     */\n    async componentDidMount() {\n        try {\n            const questions = await fetch('/api_proto/');\n            const json = await questions.json();\n            // TODO: (?) Currently only accesses first story, cannot handle multiple\n            this.setState(json[0]);\n        } catch (e) {\n            console.log(e);\n        }\n    }\n\n    /**\n     * Once the user has finished answering all of the questions,\n     * this function uploads all of the data to the database\n     * so that it can be referenced in the instructor view\n     */\n    postData() {\n        const url = '/api_proto/add-response/';\n        const data = {\n            story_text: this.state.story_text,\n            student_responses: this.state.answers,\n        };\n\n        console.log(JSON.stringify(data));\n\n        fetch(url, {\n            method: 'POST',\n            body: JSON.stringify(data),\n            headers: {\n                'Content-type': 'application/json',\n                'X-CSRFToken': this.csrftoken,\n            }\n\n        }).then(res => res.json()).then(response => console.log(JSON.stringify(response)))\n            .catch(err => console.log(err));\n    }\n\n    /**\n     * Called when the user provides input into the response field,\n     * and updates the state accordingly\n     */\n    handleFormChange(e) {\n        this.setState({textInput: e.target.value});\n    }\n\n\n    /**\n     * Ensures that the response the user is trying to submit\n     * obeys the word limit (as well as check that the response exists).\n     *\n     * Returns false if there is a conflict between the rules and response, true otherwise\n     */\n    static validateSubmission(response, word_limit) {\n        if (!response) {\n            return false;\n        } else {\n            const response_list = response.trim().split(' ');\n            if (!(response_list.length <= word_limit)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n\n    /**\n     * When a user tries to submit a response, this function should be called.\n     *\n     * It first checks to make sure that the response is valid\n     * and then stores it in memory in a format that is easy to transfer\n     * to Django when the user has completed all of the questions\n     */\n    handleSubmit(e) {\n        e.preventDefault();\n        let question_number = this.state.question_number;\n        let context_number = this.state.context_number;\n        const answers = this.state.answers.slice();\n        const response = this.state.textInput;\n        let views = this.state.views;\n        const word_limit = this.state.questions[question_number].word_limit;\n        let finished = this.state.finished;\n        let show_story = this.state.show_story;\n        let show_response = this.state.show_response;\n        let scroll_ups = this.state.scroll_ups;\n\n        // Don't let the user submit until their response fits the criteria of the question\n        const isValid = PrototypeStudentView.validateSubmission(response, word_limit);\n        if (!isValid) {\n            this.setState({word_alert: true,});\n            return;\n        }\n\n        const answer = {\n            'context': this.state.contexts[context_number],\n            'question': this.state.questions[question_number].text,\n            response,\n            views,\n            scroll_ups,\n        };\n        answers.push(answer);\n        views = '[]';  // Reset views for the next response\n        const timer = new TimeIt();  // Refresh the timer so that you aren't double counting\n        scroll_ups = 0;  // Reset scrolls for next response\n\n        // Logic for storing data in memory\n        if (question_number < this.state.questions.length - 1) {\n            question_number += 1;\n\n        } else { // we're at the last question\n            if (context_number < this.state.contexts.length - 1) {\n                context_number += 1;\n                question_number = 0;\n                show_story = true;\n            } else { // we're at the last context\n                finished = true;\n                show_story = false;\n                show_response = false;\n            }\n        }\n\n        this.setState({\n            question_number,\n            context_number,\n            answers,\n            finished,\n            textInput: '',\n            show_story,\n            show_response,\n            views,\n            word_alert: false,\n            timer,\n            scroll_ups,\n        });\n    }\n\n    /**\n     * Readies all information for when the user presses the start button on the landing screen\n     */\n    handleStartClick() {\n        const timer = new TimeIt();\n        this.setState({show_story: true, timer,});\n    }\n\n    /**\n     * Handles what to do when the user advances past the story page\n     */\n    storyButtonClick() {\n        // Keep track of the length of time that the user viewed the story\n        const view_list = JSON.parse(this.state.views);\n        const time = this.state.timer.stop();\n        view_list.push(time);\n        const views = JSON.stringify(view_list);\n\n        this.setState({\n            show_story: false,\n            show_context:true,\n            views,\n        });\n    }\n\n    /**\n     * Handles what to do when the user advances past the context page\n     */\n    contextButtonClick() {\n        this.setState({show_context: false, show_question:true});\n    }\n\n    /**\n     * Handles what to do when the user advances past the question page\n     */\n    questionButtonClick() {\n        this.setState({show_question: false, show_go_back: true,});\n    }\n\n    /**\n     * When the user presses a back button, displays the relevant page and starts a new timer object\n     */\n    backButtonClick() {\n        const timer = new TimeIt();\n        this.setState({\n            show_go_back: false,\n            show_story: true,\n            show_response: false,\n            timer,\n        });\n    }\n\n    /**\n     * Handles what to do when the user advances beyond the page that checks if they wish to go back\n     */\n    continueButtonClick() {\n        this.setState({show_go_back: false, show_response:true});\n    }\n\n    render() {\n        let response;\n\n        if (this.state.story_text) { // Check that the story is loaded before showing any data\n            if (this.state.show_story) {\n                response = (\n                    <Story\n                        story_text={this.state.story_text}\n                        onClick={() => this.storyButtonClick()}\n                        onScroll={(e) => {this.setState(handleStoryScroll(e, this.state))}}\n                    />\n                );\n            } else if (this.state.show_context) {\n                response = (\n                    <Context\n                        context={this.state.contexts[this.state.context_number]}\n                        onClick={() => this.contextButtonClick()}\n                    />\n                );\n            } else if (this.state.show_go_back) {\n                response = (\n                    <GoBack\n                        goBack={() => this.backButtonClick()}\n                        continue={() => this.continueButtonClick()}\n                    />\n                );\n            } else if (this.state.show_question) {\n                response = (\n                    <Question\n                        question={this.state.questions[this.state.question_number]['text']}\n                        onClick={() => this.questionButtonClick()}\n                    />\n                );\n            } else if (this.state.show_response) {\n                response = (\n                    <div>\n                        <WordAlert word_alert={this.state.word_alert}/>\n                        <Response\n                            onSubmit={(e) => this.handleSubmit(e)}\n                            onChange={(e) => this.handleFormChange(e)}\n                            question={this.state.questions[this.state.question_number]['text']}\n                            answer={this.state.textInput}\n                            goBack={() => this.backButtonClick()}\n                        />\n                    </div>\n                );\n            } else if (this.state.finished) {\n                this.postData();\n                response = (\n                    <div className={'finished'}>\n                        Thank you for your time!\n                    </div>\n                );\n            } else {\n                response = (\n                    <div className={'start'}>\n                        <div>Are you ready?</div>\n                        <nav className=\"navbar fixed-bottom\">\n                            <button\n                                className=\"btn btn-primary btn-lg btn-block\"\n                                onClick={() => this.handleStartClick()}>\n                                Start!\n                            </button>\n                        </nav>\n                    </div>\n                );\n            }\n        } else { // Haven't pulled prompts from database yet\n            response = null;\n        }\n\n        return response;\n    }\n}\n\n","import React from 'react';\nimport './instructor_view.css';\nimport PropTypes from \"prop-types\";\n\n/**\n * A component that returns a simple table with all of the responses for a particular student\n *\n * Passes props.student_responses to Response component\n */\nfunction Student(props) {\n    const responses = props.student_responses.map(response => (\n        <StudentResponse response={response} key={response.id}/>\n    ));\n\n    return (\n        <div className='student'>\n            <div className='student-number'><h1>Student #{props.id}</h1></div>\n            <div><h5><b>Story: </b> {props.story}</h5></div>\n            <table className=\"table striped bordered hover responsive\">\n                <thead>\n                    <tr>\n                        <td><b>Context</b></td>\n                        <td><b>Question</b></td>\n                        <td><b>Response</b></td>\n                        <td><b>Views</b></td>\n                        <td><b>Scrolls</b></td>\n                    </tr>\n                </thead>\n                <tbody>{responses}</tbody>\n            </table>\n        </div>\n    );\n}\nStudent.propTypes = {\n    id: PropTypes.number,\n    student_responses: PropTypes.array,\n    story: PropTypes.string,\n};\n\n\n/**\n * Returns a single table row given the response data\n *\n * For use with the Student component\n */\nfunction StudentResponse(props) {\n    const response = props.response;\n\n    return (\n        <tr>\n            <td>{response.context}</td>\n            <td>{response.question}</td>\n            <td>{response.response}</td>\n            <td>{response.views}</td>\n            <td>{response.scroll_ups}</td>\n        </tr>\n    );\n}\nStudentResponse.propTypes = {\n    response: PropTypes.object,\n};\n\n\n/**\n * Returns a page that sorts students' responses by the question that they are answering\n *\n * Passes data to Question component\n */\nfunction QuestionView(props) {\n    const students = props.students;\n    let questions = {};\n\n    // Sorts each student response by the context and question that they are answering\n    // TODO: clean this up!\n    for (let i = 0; i < students.length; i++) {\n\n        const student = students[i];\n        const student_responses = student.student_responses;\n\n        // Iterate through all of the responses the student provided\n        for (let response_num = 0; response_num < student_responses.length; response_num++) {\n\n            const response = student_responses[response_num];\n            const question = response.question;\n            const context = response.context;\n\n            // We have already added the context to our questions object\n            if (context in questions) {\n\n                const context_pairing = questions[context];\n\n                // The question is already in the context's list, so add the student\n                if (question in context_pairing) {\n                    context_pairing[question].push([i, response_num]);\n\n                // The context/question pairing doesn't exist yet\n                } else {\n                    context_pairing[question] = [[i, response_num]];\n                }\n\n            // The context doesn't exist yet, so add it to the questions object\n            } else {\n                questions[context] = {};\n                questions[context][question] = [[i, response_num]];\n            }\n        }\n    }\n\n    // Create sections on the page dedicated to each Context/Question pairing\n    const questionsToView = [];\n\n    // context_num is not guaranteed to start with 0\n    let question_key;\n    for (let context_num in questions) {\n        if (!Object.prototype.hasOwnProperty.call(questions, context_num)) {\n            continue;\n        }\n\n        // Identify the given context/question for this group of responses\n        const context_pairing = questions[context_num];\n        for (let question in context_pairing) {\n\n            if (!Object.prototype.hasOwnProperty.call(context_pairing, question)) {\n                continue;\n            }\n\n            // question_key will be a string of the form 'cnqx' where n and x are integers\n            // representing the context and question respectively\n            question_key = 'c' + String(context_num) + 'q' + String(question);\n            questionsToView.push(\n                <Question\n                    context={context_num}\n                    question={question}\n                    indices={context_pairing[question]}\n                    students={students}\n                    key={question_key}\n                />\n            );\n        }\n    }\n\n    return (\n        <div className='question-view'>\n            {questionsToView}\n        </div>\n    );\n}\nQuestionView.propTypes = {\n    students: PropTypes.array,\n};\n\n/**\n * Creates a <div> that displays student response data for a particular question\n *\n * Requires 'indices' property to display\n */\nclass Question extends React.Component {\n\n    render() {\n        const responses = this.props.indices.map(index => (\n            <QuestionResponse\n                student={this.props.students[index[0]]}\n                prompt_num={index[1]}\n                key={index[0]}/>\n        ));\n\n        return (\n            <div>\n                <div><h2>Context: {this.props.context}</h2></div>\n                <div><h2>Question: {this.props.question}</h2></div>\n                <table className=\"table striped bordered hover responsive\">\n                    <thead>\n                        <tr>\n                            <td><b>Student</b></td>\n                            <td><b>Response</b></td>\n                            <td><b>Views</b></td>\n                            <td><b>Scrolls</b></td>\n                        </tr>\n                    </thead>\n                    <tbody>{responses}</tbody>\n                </table>\n            </div>\n        );\n    }\n}\nQuestion.propTypes = {\n    indices: PropTypes.array.isRequired,\n    students: PropTypes.array,\n    context: PropTypes.string,\n    question: PropTypes.string,\n};\n\n\n/**\n * Generates and returns a single row for the Question component\n */\nclass QuestionResponse extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        const student_response = props.student.student_responses[props.prompt_num];\n        this.state = {\n            student: props.student,\n            response: student_response.response,\n            views: student_response.views,\n            scroll_ups: student_response.scroll_ups,\n        };\n    }\n\n    render() {\n        return (\n            <tr>\n                <td>{this.state.student.id}</td>\n                <td>{this.state.response}</td>\n                <td>{this.state.views}</td>\n                <td>{this.state.scroll_ups}</td>\n            </tr>\n        );\n    }\n}\nQuestionResponse.propTypes = {\n    student: PropTypes.object,\n    prompt_num: PropTypes.number,\n};\n\n/**\n * Main component for the Instructor view.\n * Accesses and maintains database data for student responses and handles\n * displaying the information properly on the page.\n */\nexport class PrototypeInstructorView extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            students: [],\n            loaded: false,\n            sortBy: 'student',\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    /**\n     * This loads all of the data the moment the Instructor view is opened in the browser.\n     *\n     * If it cannot access the database, it logs the error\n     */\n    async componentDidMount() {\n        try {\n            const res = await fetch('/api/add-response/');\n            const students = await res.json();\n            console.log(students);\n            const sortBy = this.state.sortBy;\n            this.setState({\n                students,\n                loaded: true,\n                sortBy,\n            });\n        } catch (e) {\n            console.log(e);\n        }\n    }\n\n    /**\n     * Called when the user wishes to change the way that the data on the page is displayed\n     * (i.e. by student, story, or question) and updates the state accordingly.\n     */\n    handleSubmit(event) {\n        const students = this.state.students;\n        const loaded = this.state.loaded;\n        this.setState({\n            students,\n            loaded,\n            sortBy: event.target.value\n        });\n    }\n\n    /**\n     * Whenever the user changes the value of the 'Sort by' dropdown menu,\n     * this function is called and updates the state accordingly\n     */\n    handleChange(event) {\n        const students = this.state.students;\n        const loaded = this.state.loaded;\n        this.setState({\n            students,\n            loaded,\n            sortBy: event.target.value\n        });\n    }\n\n\n    render() {\n        if (this.state.loaded) {  // Only do this if we have the data! Otherwise breaks :(\n            let tempStudents = this.state.students;\n            let students;\n\n            if (this.state.sortBy === 'story') { // If we're sorting by story\n                const sorter = (a, b) => (a.story.toLowerCase() > b.story.toLowerCase() ? 1 : -1);\n                tempStudents.sort((a, b) => sorter(a, b));\n                students = tempStudents.map(student => (\n                    <Student\n                        story={student.story}\n                        student_responses={student.student_responses}\n                        id={student.id}\n                        key={student.id}\n                    />\n                ));\n            } else if (this.state.sortBy === 'question') {  // If we're sorting by the question\n                students = <QuestionView students={tempStudents}/>;\n            } else {  // By default, the Student view is displayed on page load\n                students = tempStudents.map(student => (\n                    <Student\n                        story={student.story}\n                        student_responses={student.student_responses}\n                        id={student.id}\n                        key={student.id}\n                    />\n                ));\n            }\n\n            return (\n                <div>\n                    <nav className=\"navbar fixed-top\">\n                        <form onSubmit={this.handleSubmit}>\n                            <label>\n                                Sort by\n                                <select value={this.state.sortBy} onChange={this.handleChange}>\n                                    <option value={'student'}>Student</option>\n                                    <option value={'story'}>Story</option>\n                                    <option value={'question'}>Question</option>\n                                </select>\n                            </label>\n                        </form>\n                    </nav>\n                    <div>\n                        {students}\n                    </div>\n                </div>\n            );\n        } else {\n            // This ensures that our page doesn't get funky if we don't have data loaded properly\n            return null;\n        }\n    }\n}\n","import React from \"react\";\nimport PropTypes from 'prop-types';\n\nexport class SingleValueAnalysis extends React.Component {\n    render() {\n        let display_value;\n        if (this.props.value !== undefined && this.props.round_digits !== undefined) {\n            display_value = this.props.value.toFixed(2);\n        } else {\n            display_value = this.props.value;\n        }\n\n        return(\n            <div className={\"row\"}>\n                <strong className={\"col-3\"}>\n                    {this.props.header}\n                </strong>\n                <p className={\"col-9 mb-1 text-left d-block d-md-inline\"}>\n                    {display_value} {this.props.unit}\n                </p>\n            </div>\n        );\n    }\n}\nSingleValueAnalysis.propTypes = {\n    header: PropTypes.string,\n    value: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string,\n    ]),\n    unit: PropTypes.string,\n    round_digits: PropTypes.number,\n};\n\nexport class TabularAnalysis extends React.Component{\n    render() {\n        // Create an array of indices based on the length of the header array\n        let range = n => Array.from(Array(n).keys());\n        let indices = range(this.props.headers.length);\n\n        return(\n            <div>\n                <h3 className={\"mt-4\"}> {this.props.title} </h3>\n                <table className={\"table analysis-table\"}>\n                    <tbody>\n                        <tr>\n                            {/* Auto generate the headers */}\n                            {this.props.headers.map( (header, k) => (\n                                <th className={\"p-2\"} key={k}>{header}</th>)\n                            )}\n                        </tr>\n                        {this.props.data.map( (entry, k) => (\n                            <tr key={k}>\n                                {indices.map( (index, k) => (\n                                    <td className={\"p-2\"} key={k}> {entry[index]} </td>)\n                                )}\n                            </tr>)\n                        )}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\nTabularAnalysis.propTypes = {\n    headers: PropTypes.array,\n    data: PropTypes.array,\n    title: PropTypes.string,\n\n};\n\nexport class CommonResponses extends React.Component {\n    render() {\n        return (\n            <TabularAnalysis\n                title={\"Most Common Responses\"}\n                data={this.props.responses}\n                headers={[\"Question\",\"Context\",\"Answers\"]}\n            />\n        );\n    }\n}\n\nCommonResponses.propTypes = {\n    responses: PropTypes.array,\n};\n\nexport class FrequencyFeelingTable extends React.Component {\n    render() {\n        return (\n            <div>\n                <TabularAnalysis\n                    title={ \"Frequency Feelings\"}\n                    headers={[\"Word\",\"Frequency\"]}\n                    data={this.props.feelings}\n                />\n            </div>\n        );\n    }\n}\nFrequencyFeelingTable.propTypes = {\n    feelings: PropTypes.array,\n};\n\nexport class ContextVsViewTime extends React.Component {\n    render() {\n        const viewTimesList = Object.entries(this.props.viewTime);\n        const roundedViewTimes = viewTimesList.map(context =>\n            [context[0] , Math.round(context[1] * 1000) / 1000]);\n        return (\n            <div>\n                <TabularAnalysis\n                    title={\"Mean View Times of Different Contexts\"}\n                    headers={[\"Context\",\"Mean View Time (seconds)\"]}\n                    data={roundedViewTimes}\n                />\n            </div>\n        )\n    }\n}\nContextVsViewTime.propTypes = {\n    viewTime: PropTypes.object,\n};\n\nexport class SentimentScores extends React.Component {\n    render() {\n        return (\n            <div>\n                <SingleValueAnalysis\n                    header={\"Average Positivity Score\"}\n                    value={this.props.sentiment_average}\n                    round_digits={2}\n                />\n\n                <SingleValueAnalysis\n                    header={\"Standard Deviation of Positivity Score\"}\n                    value={this.props.sentiment_std}\n                    round_digits={2}\n                />\n            </div>\n        );\n    }\n}\nSentimentScores.propTypes = {\n    sentiment_average: PropTypes.number,\n    sentiment_std: PropTypes.number,\n};\n\nexport class MeanReadingTimesForQuestions extends React.Component {\n    render() {\n        return (\n            <TabularAnalysis\n                title={\"Mean Reading Time for Questions\"}\n                headers={[\n                    \"Question\",\n                    \"Context\",\n                    \"Mean time without outliers\",\n                    \"Total number of readers\",\n                ]}\n                data={this.props.mean_reading_times_for_questions}\n            />\n        );\n    }\n}\nMeanReadingTimesForQuestions.propTypes = {\n    mean_reading_times_for_questions: PropTypes.array,\n};\n\nexport class RereadCountTable extends React.Component {\n    render() {\n        return (\n            <TabularAnalysis\n                title={\"Mean Reread Counts for Questions and Context\"}\n                headers={[\n                    \"Question\",\n                    \"Context\",\n                    \"Mean Reread Counts\",\n                    \"Total number of readers\",\n                ]}\n                data={this.props.run_compute_reread_counts}\n            />\n        );\n    }\n}\nRereadCountTable.propTypes = {\n    run_compute_reread_counts: PropTypes.array,\n};\n\nexport class RelevantWordPercentages extends React.Component {\n    formatDataWithPercentSign(rawData) {\n        //Formats the given data (usually in decimal form) as a percentage\n        let formattedData = [];\n        for (let [question, decimal] of rawData) {\n            formattedData.push([question, `${Math.round(100 * decimal)}%`]);\n        }\n        return formattedData;\n    }\n\n    render() {\n        return (\n            <div>\n                {this.props.relevantWords}\n                <TabularAnalysis\n                    title={\"Percentage of Students Using Relevant Words\"}\n                    headers={[\n                        \"Question\",\n                        \"Percentage\"\n                    ]}\n                    data={this.formatDataWithPercentSign(this.props.entryData)}\n                />\n            </div>\n        );\n    }\n}\nRelevantWordPercentages.propTypes = {\n    entryData: PropTypes.array,\n    relevantWords: PropTypes.array,\n};\n\nexport class PrototypeAnalysisView extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // we initialize analysis to null, so we can check in render() whether\n            // we've received a response from the server yet\n            analysis: null,\n        };\n    }\n\n    /**\n     * This function is fired once this component has loaded into the DOM.\n     * We send a request to the backend for the analysis data.\n     */\n    async componentDidMount() {\n        try {\n            const response = await fetch('/api_proto/analysis/');\n            const analysis = await response.json();\n            this.setState({analysis});\n        } catch (e) {\n            // For now, just log errors to the console.\n            console.log(e);\n        }\n    }\n\n    render() {\n        if (this.state.analysis !== null) {\n            const {  // object destructuring:\n                total_view_time,\n                run_mean_reading_analysis_for_questions,\n                frequency_feelings,\n                context_vs_read_time,\n                question_sentiment_analysis,\n                compute_median_view_time,\n                run_compute_reread_counts,\n                compute_mean_response_length,\n                percent_using_relevant_words_by_question\n            } = this.state.analysis;\n            return (\n                <div className={\"container\"}>\n                    <nav className={\"navbar navbar-expand-lg\"}>\n                        <div className={\"navbar-nav\"}>\n                            <a\n                                className={\"nav-link nav-item text-dark font-weight-bold\"}\n                                href={\"#\"}\n                            >Overview</a>\n                            <a\n                                className={\"nav-link nav-item text-dark font-weight-bold\"}\n                                href={\"#\"}\n                            >Analysis</a>\n                        </div>\n                    </nav>\n                    <h1\n                        className={\"text-center display-4 mb-4\"}\n                        id={\"page-title\"}\n                    >Analysis of Student Responses</h1>\n                    <SingleValueAnalysis\n                        header={\"Total view time\"}\n                        value={total_view_time}\n                        unit={\"seconds\"}\n                    />\n                    <SingleValueAnalysis\n                        header={\"Median view time\"}\n                        value={compute_median_view_time}\n                        unit={\"seconds\"}\n                    />\n                    <SingleValueAnalysis\n                        header={\"Mean response length\"}\n                        value={compute_mean_response_length}\n                        unit={\"characters\"}\n                    />\n                    <SentimentScores\n                        sentiment_average={question_sentiment_analysis[0]}\n                        sentiment_std={question_sentiment_analysis[1]}\n                    />\n                    <MeanReadingTimesForQuestions\n                        mean_reading_times_for_questions={run_mean_reading_analysis_for_questions}\n                    />\n                    <RereadCountTable\n                        run_compute_reread_counts={run_compute_reread_counts}\n                    />\n                    <FrequencyFeelingTable feelings={frequency_feelings}/>\n                    <ContextVsViewTime viewTime={context_vs_read_time}/>\n                    <RelevantWordPercentages\n                        entryData={percent_using_relevant_words_by_question}\n                    />\n                </div>\n            );\n        } else {\n            return (\n                <div>Loading!</div>\n            );\n        }\n    }\n}\n","import React from \"react\";\nimport PropTypes from 'prop-types';\n\nimport {getCookie, TimeIt} from \"../common\";\n\n// enum representing which view to show in reading view\nconst VIEWS = {\n    INSTRUCTIONS_NAME: 0,\n    READING: 1,\n    OVERVIEW: 2,\n};\n\n/*\n * Represents the actual Segment window\n */\nexport class Segment extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const segment_lines = this.props.text.split(\"\\r\\n\");\n        return (\n            <div\n                className=\"segment\"\n                ref={this.props.segment_ref}\n                onScroll={this.props.handleScroll}\n                onMouseUp={this.props.handleSelectionDragEnd}\n            >\n                {segment_lines.map(\n                    (line, k) => (<p className={\"segment-text text-justify\"} key={k}>{line}</p>)\n                )}\n            </div>\n        );\n    }\n}\nSegment.propTypes = {\n    text: PropTypes.string,\n    handleScroll: PropTypes.func,\n    handleSelectionDragEnd: PropTypes.func,\n    segment_ref: PropTypes.shape({current: PropTypes.instanceOf(Element)})\n};\n\nclass Question extends React.Component {\n    render(){\n        const ems = this.props.evidenceModeState;\n        const evidenceModeActive =\n            ems.active\n            && ems.question_id === this.props.question.id\n            && ems.is_document_question === this.props.is_document_question;\n\n        const evidence = this.props.response.evidence;\n        const response_text = this.props.response.response;\n\n        return(\n            <div className=\"card mb-4\">\n                <div className=\"card-header\">\n                    <div className='segment-question-text question-text'>\n                        {this.props.question.text}\n                    </div>\n                </div>\n                <div className=\"card-body\">\n                    <textarea\n                        className={'form-control form-control-lg questions-boxes'}\n                        rows=\"4\"\n                        onChange={this.props.handleResponseChange}\n                        value={response_text}\n                    />\n                    {this.props.question.require_evidence && (\n                        <div className=\"evidence-section\">\n                            {evidence && evidence.length ?\n                                <div className=\"evidence-values-section mt-1\">\n                                    <div className=\"evidence-values\">\n                                        {evidence.map((evidence_text, i) => (\n                                            <div\n                                                className=\"card card-body mb-3 evidence-value\"\n                                                key={i}\n                                            >\n                                                {'\"' + evidence_text + '\"'}\n                                                <div className=\"text-right\">\n                                                    <button\n                                                        className=\"remove-evidence-button\"\n                                                        onClick={\n                                                            () => this.props.handleRemoveEvidence(\n                                                                this.props.is_document_question,\n                                                                this.props.question.id,\n                                                                i,\n                                                            )\n                                                        }\n                                                    >X</button>\n                                                </div>\n                                            </div>\n                                        ))}\n                                    </div>\n                                </div>\n                                :\n                                ''\n                            }\n                            <button\n                                className=\"evidence-toggle-button\"\n                                onClick={this.props.toggleAddEvidenceMode}\n                            >\n                                {evidenceModeActive ? 'Stop Tagging' : 'Add Evidence'}\n                            </button>\n                            {evidenceModeActive &&\n                            <span className=\"form-hint-text\">\n                                Highlight parts of the text to save as evidence.\n                            </span>\n                            }\n                        </div>\n                    )}\n                </div>\n            </div>\n        );\n    }\n}\nQuestion.propTypes = {\n    question: PropTypes.object,\n    response: PropTypes.object,\n    is_document_question: PropTypes.bool,\n    evidenceModeState: PropTypes.object,\n    handleResponseChange: PropTypes.func,\n    handleRemoveEvidence: PropTypes.func,\n    toggleAddEvidenceMode: PropTypes.func,\n}\n\n\n\nclass NavBar extends React.Component {\n    render() {\n        const on_last_segment_and_rereading =\n            this.props.segment_num === this.props.document_segments.length - 1\n            && this.props.rereading;\n\n        return (\n            <React.Fragment>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        {!on_last_segment_and_rereading\n                            ? (\n                                <button\n                                    className=\"next-btn\"\n                                    onClick={() => this.props.nextSegment()}\n                                >\n                                    {this.props.rereading ? 'Next' : 'Continue'}\n                                </button>\n                            )\n                            : (\n                                <button\n                                    className=\"next-btn\"\n                                    onClick={() => this.props.toOverview()}\n                                >\n                                    To Overview\n                                </button>\n                            )\n                        }\n                    </div>\n                </div>\n            </React.Fragment>\n        )\n    }\n}\nNavBar.propTypes = {\n    document_segments: PropTypes.array,\n    segment_num: PropTypes.number,\n    rereading: PropTypes.bool,\n    prevSegment: PropTypes.func,\n    nextSegment: PropTypes.func,\n    toOverview: PropTypes.func,\n};\n\n\n/*\n * A component to show the user their responses in the overview view\n */\nclass OverviewQuestionDisplay extends React.Component {\n    render() {\n        const q_and_r = this.props.question_and_response;\n        const q = q_and_r.question;\n        const r = q_and_r.response;\n        return (\n            <div className=\"card mb-5\">\n                <div className=\"card-header\">\n                    <div className='segment-question-text question-text'>\n                        {q.text}\n                    </div>\n                </div>\n                <div className=\"card-body\">\n                    {r.response}\n                </div>\n            </div>\n        );\n    }\n}\nOverviewQuestionDisplay.propTypes = {\n    question_and_response: PropTypes.object,\n}\n\n\nclass OverviewView extends React.Component {\n    render() {\n        const full_document_text = [];\n        this.props.all_segments.map((el) => full_document_text.push(el.text.split(\"\\r\\n\")));\n        console.log(this.props.reading_data);\n        const segment_data = this.props.reading_data.segment_data;\n        const rereadings = segment_data.filter((datum) => datum.is_rereading);\n\n        let all_responses = [];\n        for (const rereading of rereadings) {\n            all_responses = all_responses.concat(rereading.segment_responses);\n        }\n\n        let all_questions = [];\n        for (const segment of this.props.all_segments) {\n            const segment_questions = segment.questions;\n            all_questions = all_questions.concat(segment_questions);\n        }\n\n        const question_and_responses = [];\n        for (const response of all_responses) {\n            const q = all_questions.find((q) => q.id === response.question);\n            question_and_responses.push({\n                question: q,\n                response,\n            });\n        }\n\n        return (\n            <div className=\"row overview-container\">\n                <div className=\"col-12\"><hr/></div>\n                <div className=\"segment-container\">\n                    <div className=\"scroll-overview\">\n                        {full_document_text.map((segment_text_array) => (\n                            segment_text_array.map((text, i) => (\n                                <p className={\"segment-text text-justify\"} key={i}>{text}</p>\n                            ))\n                        ))}\n                    </div>\n                </div>\n                <div className=\"questions-container\">\n                    <p>\n                        Thank you for participating! Here is a summary of your responses:\n                    </p>\n                    {question_and_responses.map((q_and_r, i) =>\n                        <OverviewQuestionDisplay key={i} question_and_response={q_and_r} />\n                    )}\n                    <button\n                        className=\"next-btn\"\n                        onClick={() => window.location.href = '../project_overview'}\n                    >Finish Reading\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\nOverviewView.propTypes = {\n    all_segments: PropTypes.array,\n    reading_data: PropTypes.object,\n};\n\nexport class InstructionsNameView extends React.Component {\n    render() {\n        return (\n            <div className={\"container\"}>\n                <h1 className={\"display-4 text-center mt-4 title\"}>\n                    Instructions\n                </h1>\n                <div className={\"mb-5 instructions\"}>\n                    <p id={\"instructions-overview\"}>\n                        Do a close reading of the text by following these steps:\n                        Read all five segments of the text one segment at a time, while answering\n                        questions for each segment along the way (including the two common\n                        questions that recur for each segment).\n                    </p>\n                    <ol id={\"instructions-list\"}>\n                        <li>\n                            After you read through the whole segment, click the “Continue” button\n                            in order to access the questions for that particular segment.\n                        </li>\n                        <li>\n                            As often as you need to, scroll through the segment in order to provide\n                            an answer for each question posed for that segment.\n                        </li>\n                        <li>\n                            Provide evidence for questions that require evidence by clicking\n                            “Add Evidence,” highlighting the words or passages from the segment\n                            you want to add, then clicking “Stop Tagging”.\n                            Repeat this process as many times as there are other pieces of evidence\n                            from the segment you want to add.\n                        </li>\n                        <li>\n                            After you’ve answered all questions and added evidence for a segment,\n                            click the “Next” button in order to access the next segment.\n                        </li>\n                    </ol>\n                    <h4 className=\"title\">Enter your name or leave blank to remain anonymous</h4>\n                    <div className={\"input-group\"}>\n                        <input\n                            className={\"form-control\"}\n                            type={\"text\"}\n                            onChange={(e) => this.props.handleStudentName(e)}\n                        />\n                        <div className={\"input-group-append\"}>\n                            <button\n                                className={\"btn start-btn \"}\n                                onClick={() => this.props.startReading()}\n                            >\n                                Start Reading\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\nInstructionsNameView.propTypes = {\n    handleStudentName: PropTypes.func,\n    startReading: PropTypes.func,\n};\n\nexport class ReadingView extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            current_view: VIEWS.INSTRUCTIONS_NAME,\n            student_name: \"\",\n            segment_num: 0,\n            timer: null,\n            scroll_top: 0,\n            segments_viewed: [0],\n            rereading: false,  // we alternate reading and rereading\n            document: null,\n            reading_data: null,\n            interval_timer: null,\n            segmentQuestionNum: 0,\n            segmentResponseArray: [],\n            documentResponseArray: [],\n            evidenceModeState: {\n                active: false,\n                question_id: 0,\n                is_document_question: false,\n            },\n            current_selection: '',\n        };\n        this.scroll_data = [];\n        this.csrftoken = getCookie('csrftoken');\n\n        this.segment_ref = React.createRef();\n        this.allQuestionsAreCompleted = this.allQuestionsAreCompleted.bind(this);\n        this.nextSegment = this.nextSegment.bind(this);\n        this.toOverview = this.toOverview.bind(this);\n        this.buildQuestionFields = this.buildQuestionFields.bind(this);\n        this.startReading = this.startReading.bind(this);\n        this.handleStudentName = this.handleStudentName.bind(this);\n        this.toggleAddEvidenceMode = this.toggleAddEvidenceMode.bind(this);\n        this.handleResponseChange.bind(this);\n        this.handleRemoveEvidence.bind(this);\n    }\n\n    async startReading() {\n        try {\n            // Hard code the document we know exists for now -- generalize later...\n            const url = '/api/documents/1/';\n            const data = {\n                name: this.state.student_name,\n            };\n            const response = await fetch(url, {\n                method: 'POST',\n                body: JSON.stringify(data),\n                headers: {\n                    'Content-type': 'application/json',\n                    'X-CSRFToken': this.csrftoken,\n                }\n            });\n            const response_json = await response.json();\n            const document = response_json.document;\n            const reading_data = response_json.reading_data;\n            const interval_timer = setInterval(() => this.recordScroll(), 1000);\n            this.setState({\n                document,\n                interval_timer,\n                reading_data,\n                current_view: VIEWS.READING,\n            });\n            this.sendData(true);\n        } catch (e) {\n            console.log(e);\n        }\n    }\n\n    async sendData(firstTime){\n        if (!firstTime) {\n            const time = this.state.timer.stop();\n            const url = '/api/add-response/';\n            const reading_data = {\n                reading_data_id: this.state.reading_data.id,\n                segment_data: [{\n                    id: this.state.document.segments[this.state.segment_num].id,\n                    scroll_data: JSON.stringify(this.scroll_data),\n                    view_time: time,\n                    is_rereading: this.state.rereading,\n                    segment_responses: this.state.segmentResponseArray,\n                }],\n                document_responses: this.state.documentResponseArray,\n            };\n            const response = await fetch(url, {\n                method: 'POST',\n                body: JSON.stringify(reading_data),\n                headers: {\n                    'Content-type': 'application/json',\n                    'X-CSRFToken': this.csrftoken,\n                }\n            });\n            const new_reading_data = await response.json();\n            this.scroll_data = [];\n            this.setState({reading_data: new_reading_data});\n        }\n        const timer = new TimeIt();\n        this.setState({timer});\n    }\n\n    recordScroll() {\n        this.scroll_data.push(this.state.scroll_top);\n    }\n\n    handleScroll(e) {\n        const scroll_top = e.target.scrollTop;\n        this.setState({scroll_top});\n    }\n\n    handleResponseChange(is_document_question, question_id, event) {\n        const update_dict = {\n            response: event.target.value,\n        };\n        if (is_document_question) {\n            update_dict.response_segment = this.state.segment_num;\n        }\n        this.updateResponseObject(is_document_question, question_id, update_dict);\n    }\n\n    getOrCreateResponseObjectAndArray(is_document_question, question_id) {\n        let responseArray;\n        if (is_document_question) {\n            responseArray = this.state.documentResponseArray.slice();\n        } else {\n            responseArray = this.state.segmentResponseArray.slice();\n        }\n\n        // Try to find an existing response\n        let response = null;\n        for (let el of responseArray) {\n            if (el.id === question_id) {\n                response = el;\n                break;\n            }\n        }\n\n        // Add a new response object if there isn't one already\n        if (response === null) {\n            response = {id: question_id};\n            responseArray.push(response);\n        }\n\n        return [response, responseArray];\n    }\n\n    /**\n     * Allows the user to change their response to a question\n     */\n    updateResponseObject(is_document_question, question_id, update_dict) {\n        const [response, responseArray] =\n            this.getOrCreateResponseObjectAndArray(is_document_question, question_id);\n\n        // Update values in response object with update_dict\n        Object.assign(response, update_dict);\n\n        if (is_document_question) {\n            this.setState({documentResponseArray: responseArray});\n        } else {\n            this.setState({segmentResponseArray: responseArray});\n        }\n    }\n\n    allQuestionsAreCompleted () {\n        const doc = this.state.document;\n        const current_segment = doc.segments[this.state.segment_num];\n\n        const segment_questions = current_segment.questions;\n        const document_questions = doc.document_questions;\n\n        const document_responses = this.state.documentResponseArray;\n        const segment_responses = this.state.segmentResponseArray;\n\n        if (document_responses.length === document_questions.length\n            && segment_responses.length === segment_questions.length) {\n            for (const el of document_responses) {\n                if (el.response.trim() === \"\") {\n                    return false;\n                }\n                const dq = document_questions.find((dq) => dq.id === el.id);\n                if (dq.require_evidence) {\n                    if (el.evidence === undefined || el.evidence.length === 0) {\n                        return false;\n                    }\n                }\n            }\n            for (const el of segment_responses) {\n                if (el.response.trim() === \"\"){\n                    return false;\n                }\n                const sq = segment_questions.find((sq) => sq.id === el.id);\n                if (sq.require_evidence) {\n                    if (el.evidence === undefined || el.evidence.length === 0) {\n                        return false;\n                    }\n                }\n            }\n        } else {\n            return false;\n        }\n\n        return true;\n    }\n\n    checkScrolledToBottom() {\n        const segment_dom_el = this.segment_ref.current;\n\n        const scroll_remaining = segment_dom_el.scrollHeight - segment_dom_el.scrollTop;\n\n        // leave a little room for floating point error and general fuzziness\n        const is_at_bottom = Math.abs(scroll_remaining - segment_dom_el.offsetHeight) < 5;\n\n        if (is_at_bottom) {\n            return true;\n        }\n\n        return false;\n    }\n\n    nextSegment () {\n        if (this.state.rereading) {\n            // If we're already rereading, move to the next segment\n            this.gotoSegment(this.state.segment_num + 1);\n        } else {\n            // Otherwise, move on to the rereading layout, if user has scrolled to the bottom\n            if (!this.checkScrolledToBottom()) {\n                alert('Please read and scroll to the bottom of the segment before moving on.');\n                return;\n            }\n            this.sendData(false);\n            this.segment_ref.current.scrollTo(0,0);\n            this.setState({rereading: true});\n        }\n    }\n\n    validateData() {\n        // Check if all questions are completed if advancing\n        if (!this.allQuestionsAreCompleted()) {\n            alert(\"Please respond to every question and add evidence where indicated \" +\n                \"before moving on.\");\n            return false\n        }\n        return true;\n    }\n\n    gotoSegment(target_segment_num) {\n        if (!this.validateData()) { return; }\n\n        this.sendData(false);\n        this.segment_ref.current.scrollTo(0,0);\n        const segments_viewed = this.state.segments_viewed.slice();\n\n        // Store the current segment reading data into state\n        const segmentResponseArray = [];\n\n        const rereading = segments_viewed.includes(target_segment_num);\n        segments_viewed.push(target_segment_num);\n\n        this.setState({\n            rereading,\n            segments_viewed,\n            segment_num: target_segment_num,\n            segmentQuestionNum: 0,\n            segmentResponseArray,\n        });\n    }\n\n    toOverview () {\n        if(!this.validateData()) { return; }\n\n        this.sendData(false);\n        this.setState({current_view: VIEWS.OVERVIEW})\n    }\n\n    toggleAddEvidenceMode(is_document_question, question_id) {\n        const ems = this.state.evidenceModeState;\n        if (ems.active) {\n            if (ems.is_document_question !== is_document_question\n                || ems.question_id !== question_id) {\n                return;  // ignore clicks from other buttons\n            } else if (this.state.current_selection.toString() !== \"\") {\n                this.addEvidence(is_document_question, question_id);\n            }\n        }\n        ems.active = !ems.active;\n        ems.is_document_question = is_document_question;\n        ems.question_id = question_id;\n        this.setState({evidenceModeState: ems});\n    }\n\n    handleSelectionDragEnd() {\n        this.setState({\n            current_selection: window.getSelection(),\n        });\n    }\n\n    addEvidence(is_document_question, question_id) {\n        const new_evidence = this.state.current_selection.toString();\n\n        // eslint-disable-next-line no-unused-vars\n        const [response, _responseArr] =\n            this.getOrCreateResponseObjectAndArray(is_document_question, question_id);\n\n        let new_evidence_arr;\n        if (response.evidence === undefined) {\n            new_evidence_arr = [new_evidence];\n        } else {\n            new_evidence_arr = response.evidence.slice();\n            new_evidence_arr.push(new_evidence);\n        }\n\n        const update_dict = {\n            evidence: new_evidence_arr,\n        }\n        this.updateResponseObject(is_document_question, question_id, update_dict);\n    }\n\n    handleRemoveEvidence(is_document_question, question_id, evidence_index) {\n        // eslint-disable-next-line no-unused-vars\n        const [response, _responseArr] =\n            this.getOrCreateResponseObjectAndArray(is_document_question, question_id);\n        const evidence = response.evidence;\n        const updated_evidence_arr =\n            evidence.slice(0, evidence_index).concat(evidence.slice(evidence_index + 1));\n        const update_dict = {\n            evidence: updated_evidence_arr,\n        }\n        this.updateResponseObject(is_document_question, question_id, update_dict);\n    }\n\n    buildQuestionFields(questions, is_document_question) {\n        return questions.map((question, id) => {\n            // eslint-disable-next-line no-unused-vars\n            const [response, responseArr] =\n                this.getOrCreateResponseObjectAndArray(is_document_question, question.id);\n            return (\n                <Question\n                    key={id}\n                    question={question}\n                    response={response}\n                    is_document_question={is_document_question}\n                    evidenceModeState={this.state.evidenceModeState}\n                    handleResponseChange={\n                        (e) => this.handleResponseChange(is_document_question, question.id, e)\n                    }\n                    toggleAddEvidenceMode={\n                        () => this.toggleAddEvidenceMode(is_document_question, question.id)\n                    }\n                    handleRemoveEvidence={\n                        (is_doc_q, q_id, evidence_idx) =>\n                            this.handleRemoveEvidence(is_doc_q, q_id, evidence_idx)\n                    }\n                />\n            );\n        });\n    }\n\n    handleStudentName(e) {\n        this.setState({student_name: e.target.value});\n    }\n\n    render() {\n        if (this.state.current_view === VIEWS.INSTRUCTIONS_NAME) {\n            return (\n                <InstructionsNameView\n                    handleStudentName={this.handleStudentName}\n                    startReading={this.startReading}\n                />\n\n            )\n        }\n\n        const doc = this.state.document;\n        if (!doc) {\n            return ( <div>Loading!</div> );\n        }\n\n        const current_segment = doc.segments[this.state.segment_num];\n        const segment_questions = current_segment.questions;\n        const document_questions = doc.document_questions;\n\n        // Generate response fields for each of the questions\n        const segment_response_fields = this.buildQuestionFields(segment_questions, false);\n        const document_response_fields = this.buildQuestionFields(document_questions, true);\n\n        // Hardcoded for now...\n        const roman_numeral_and_segment_date = {\n            1: \"I - circa 1950s\",\n            2: \"II - circa 1960s\",\n            3: \"III - circa 1970s\",\n            4: \"IV - circa 1970s\",\n            5: \"V - circa 1980s\",\n        };\n\n        return (\n            <div className=\"container background py-3\">\n                <div className=\"row mb-4\"><div className=\"col\">\n                    <h1 className=\"display-4 title\">\n                        {doc.title} <span className=\"author\">by {doc.author}</span>\n                    </h1>\n                </div></div>\n\n                {this.state.current_view === VIEWS.OVERVIEW &&\n                    <OverviewView\n                        all_segments={doc.segments}\n                        reading_data={this.state.reading_data}\n                    />\n                }\n                {this.state.current_view === VIEWS.READING &&\n                    <React.Fragment>\n                        <div className=\"row text-and-questions\">\n                            <div className=\"col-12\">\n                                <h5 className=\"segment-num\">\n                                    Segment {\n                                        roman_numeral_and_segment_date[this.state.segment_num + 1]\n                                    }\n                                </h5>\n                                <hr/>\n                            </div>\n                            <div className='segment-container'>\n                                <Segment\n                                    text={current_segment.text}\n                                    handleScroll={(e) => this.handleScroll(e)}\n                                    segment_ref={this.segment_ref}\n                                    handleSelectionDragEnd={() => this.handleSelectionDragEnd()}\n                                />\n                            </div>\n\n                            <div className=\"questions-container\">\n                                {this.state.rereading && segment_response_fields}\n                                {this.state.rereading && document_response_fields}\n                                <NavBar\n                                    document_segments={doc.segments}\n                                    segment_num={this.state.segment_num}\n                                    rereading={this.state.rereading}\n                                    prevSegment={this.prevSegment}\n                                    nextSegment={this.nextSegment}\n                                    toOverview={this.toOverview}\n                                />\n                            </div>\n                        </div>\n                    </React.Fragment>\n                }\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport { Footer } from \"../common\";\n\n\nexport class LandingPageView extends React.Component {\n    render() {\n        return (\n            <>\n                <main className=\"text-center\">\n                    <h5 className='body-text'><em>\n                        <a\n                            href=\"https://lit.mit.edu/people/salexandre/\"\n                            className=\"landing-top-link\"\n                        >\n                            Professor Sandy Alexandre\n                        </a> and the\n                        <a\n                            href=\"https://digitalhumanities.mit.edu\"\n                            className=\"landing-top-link\"\n                        > MIT Programs in Digital Humanities\n                        </a> present\n                    </em></h5>\n                    <h1 id=\"landing-header\">The Reading Redux</h1>\n                    <img\n                        src=\"static/streshinsky_ted-girls_eating_lunch_at_school.jpg\"\n                        className=\"img-fluid\"\n                    />\n                    <div className=\"row\">\n                        <div className=\"col\">\n                            <button\n                                className=\"btn landing-btn col col-md-6\"\n                                onClick={() =>  window.location.href='/project_overview'}\n                            >\n                                Project Overview\n                            </button>\n                            <button\n                                className=\"btn landing-btn col col-md-6\"\n                                onClick={() =>  window.location.href='/reading'}\n                            >\n                                Participate\n                            </button>\n                        </div>\n                    </div>\n                </main>\n                <Footer />\n            </>\n        )\n    }\n}\n\n\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Footer } from \"../common\";\n\nclass Navigation_Bar extends React.Component {\n    render() {\n        return (\n            <nav className=\"navbar navbar-expand-md\">\n                <div className=\"navbar-nav row mr-4\">\n                    <h1>The<br/>Reading<br/>Redux</h1>\n                </div>\n                <div className=\"navbar-nav row\">\n                    <a\n                        className=\"nav-link nav-item text-dark\"\n                        href=\"/project_overview/\"\n                    >Project Overview</a>\n                    <a\n                        className=\"nav-link nav-item text-dark\"\n                        href=\"/project_overview/sample/\"\n                    >The Reading Sample</a>\n                    <a\n                        className=\"nav-link nav-item text-dark\"\n                        href=\"/project_overview/visuals/\"\n                    >Rereading Visuals</a>\n                    <a\n                        className=\"nav-link nav-item text-dark\"\n                        href=\"/project_overview/values/\"\n                    >Rereading Values</a>\n                    <a\n                        className=\"nav-link nav-item text-dark\"\n                        href=\"/project_overview/quantitative/\"\n                    >Quantitative Questions</a>\n                    <a\n                        className=\"nav-link nav-item text-dark\"\n                        href=\"/project_overview/sources/\"\n                    >Sources</a>\n                    <a\n                        className=\"nav-link nav-item text-dark\"\n                        href=\"/project_overview/writeups/\"\n                    >Student Reflections</a>\n                </div>\n            </nav>\n        );\n    }\n}\n\n\nexport class OverviewContent extends React.Component {\n    render() {\n        return (\n            <>\n                <Navigation_Bar/>\n                <main>\n                    <div className=\"row\">\n                        <div className=\"col\">\n                            <h1>{this.props.subtitle}</h1>\n                            <div className=\"body-container\">\n                                {this.props.content}\n                            </div>\n                        </div>\n                    </div>\n                </main>\n                <Footer />\n            </>\n        );\n    }\n}\nOverviewContent.propTypes = {\n    content: PropTypes.node,\n    subtitle: PropTypes.string,\n}\n\n\nexport class ReadingRedux extends React.Component {\n    render() {\n        const content = (\n            <React.Fragment>\n                <p className=\"body-text\">\n                    In literary studies we have a word to describe a novel that\n                    traces the psychological and moral growth of its protagonist.\n                    The word is <em>bildungsroman</em>. But I think it is at once\n                    strange and unfortunate that we have no such word to describe a\n                    category of research or writing that traces the development of a\n                    real-life reader of a novel. This glaring lacuna might be a\n                    consequence of the fact that we just do not have that kind of\n                    data. That is, we do not know enough about if, how, or how much\n                    a reader evolves via each encounter with a text. In a time when\n                    it seems that bigots are getting bolder and louder all while\n                    basically insisting that they are surfeited with learning new\n                    things, which could actually help make them more tolerant (and\n                    tolerable) people, it is perhaps consoling to remember that\n                    human beings are in fact changeable. Reading is essential to\n                    galvanizing those human changes. This Digital Humanities project\n                    wants to affirm this claim by studying the effects of the\n                    practice of <em>re-reading</em> a work of literature. The scope\n                    of the project includes, but is not limited to, an attempt to\n                    answer the following questions:\n                </p>\n                <ul>\n                    <li>\n                        <div className={\"bullet-text\"}>\n                            If we can obtain data from a reader’s re-reading of a\n                            text, then what might we learn about the intricacies of\n                            the interrelated processes of reading, understanding,\n                            and learning?\n                        </div>\n                    </li>\n                    <li>\n                        <div className={\"bullet-text\"}>\n                            What can we discover about how exactly a reader is\n                            reading differently upon rereading a text?\n                        </div>\n                    </li>\n                    <li>\n                        <div className={\"bullet-text\"}>\n                            How many re-readings and over the course of how long a\n                            period of time does it take to generate different\n                            meanings of one text? Is there a way to direct or\n                            expedite the process of readers making new meanings?\n                        </div>\n                    </li>\n                    <li>\n                        <div className={\"bullet-text\"}>\n                            What are the various factors that motivate people to\n                            reread texts in the first place?\n                        </div>\n                    </li>\n                    <li>\n                        <div className={\"bullet-text\"}>\n                            What are the kinds of literary texts most conducive to\n                            answering this project’s questions? In other words, what\n                            are the texts that might be said to be especially\n                            rereading-friendly?\n                        </div>\n                    </li>\n                    <li>\n                        <div className={\"bullet-text\"}>\n                            We might very well know something about the\n                            philosophical values of rereading, but what about its\n                            numeric values, particularly in terms of the various\n                            kinds of data it can generate as well as the\n                            computational analysis we can use to interpret the data?\n                        </div>\n                    </li>\n                    <li>\n                        <div className={\"bullet-text\"}>\n                            When a reader’s understanding of the meaning of a text\n                            changes over time, how can we attribute this change to\n                            how the reader has also changed over time—whether with\n                            respect to age, mentality, political perspective,\n                            gender, etc.?\n                        </div>\n                    </li>\n\n                </ul>\n                <p className=\"body-text\">\n                    While reproducibility and repeatability are expectations\n                    required to verify the credibility of scientific experiments,\n                    the kind of repetition with a difference that I hope to study\n                    here underscores not only how different the Humanities is from\n                    the Sciences but also how the Humanities <em>needs</em> to be\n                    different from scientific protocols in order to make clear that\n                    humanists value a changing human in an inevitably changing\n                    world. We fully expect that repeated readings will produce\n                    different responses and interpretations from readers. Indeed, we\n                    want that quality of changeability for readers. I envision this\n                    project being useful to students interested in learning how to\n                    generate and appreciate the values of rereading; to instructors\n                    who want and need to make the texts that they re-teach, year in\n                    and year out, “come alive” not only for their students but also\n                    for themselves; to cognitive psychologists curious about the\n                    re-reading mind; to a general audience of readers eager to\n                    understand both the qualitative and quantitative uses of our\n                    encounters with literature.\n                </p>\n            </React.Fragment>\n        );\n\n        return (\n            <OverviewContent\n                content={content}\n                subtitle=\"The Values of Rereading\"\n            />\n        );\n    }\n}\n\nexport class RereadingSample extends React.Component {\n    render() {\n        const content = (\n            <React.Fragment>\n                <blockquote className=\"blockquote card card-body\">\n                    <p className=\"mb-0\">\n                        <q>The only short story I have ever\n                            written, <q>Recitatif,</q> was\n                            an experiment in the removal of all racial codes from a\n                            narrative about two characters of different races for whom\n                            racial identity is crucial.\n                        </q>\n                    </p>\n                    <footer className=\"blockquote-footer\">\n                        Toni Morrison\n                        <br/>\n                        <strong>\n                            Playing in the Dark: Whiteness and the Literary Imagination\n                        </strong> (1992)\n                    </footer>\n                </blockquote>\n\n                <blockquote className=\"blockquote card card-body\">\n                    <p className=\"mb-0\">\n                        <q>\n                            In order to survive, you should re-read Toni [Morrison]\n                            every ten years because every ten or fifteen years we have\n                            to reimagine ourselves on this American landscape. You won’t\n                            survive if you don’t do that.\n                        </q>\n                    </p>\n                    <footer className=\"blockquote-footer\">\n                        Sonia Sanchez\n                        <br/>\n                        <strong>\n                            Toni Morrison: The Pieces I Am\n                        </strong> (2019)\n                    </footer>\n                </blockquote>\n                <p className=\"body-text\">\n                    Since the form that most of Toni Morrison’s works of fiction take is\n                    the novel, her only published short story, which never developed\n                    into a full-blown novel, represents a special case. By the time of\n                    “Recitatif”’s publication debut, Morrison had already published four\n                    of what would eventually be eleven of her known novels. “Recitatif”\n                    would have gone down in history as her only published short story\n                    were it not for the publication, in February 2015, of “Sweetness,”\n                    an excerpt of her then upcoming novel <em>God Help the Child</em>,\n                    which was released in April 2015. So, since it wouldn’t be another\n                    thirty-two years before she\n                    wrote another “short story,” Morrison, more than anyone, seems\n                    particularly aware of what a short story can do that a novel cannot.\n                    Morrison, more than anyone, knows that she can wield a short story,\n                    and\n                    more importantly, she knows precisely how! In the case of\n                    “Recitatif,”\n                    it is safe to say that she understood that the form ideally suited\n                    for\n                    the re-readings that this narrative experiment tacitly prescribes\n                    would\n                    have to be something shorter than novel length; it would have to be\n                    a\n                    short story. A short story is conducive to re-readings.\n                </p>\n\n                <h4>\n                    Why is “Recitatif” particularly appropriate for a\n                    project about re-rereading?\n                </h4>\n                <ul>\n                    <li>\n                        <div className={\"bullet-text\"}>\n                            After completing a first reading of the story, the\n                            revelation about the narrative experiment encourages a\n                            rereading; it encourages readers to do a double take, as it\n                            were.\n                        </div>\n                    </li>\n                    <li>\n                        <div className={\"bullet-text\"}>\n                            The short length and episodic structure—neatly demarcated by\n                            five clearly different settings (or time frames)—facilitate\n                            a rereading.\n                        </div>\n                    </li>\n                    <li>\n                        <div className={\"bullet-text\"}>\n                            A story that effectively holds a mirror to our biases\n                            provides the reader the opportunity to confront the workings\n                            and retrace the trajectory of their reading self. The story\n                            encourages readers to ask: How are the conclusions we jump\n                            to about characters a direct reflection of how we read\n                            them—i.e., of how we place them in a definite racial\n                            category in this particular case? How do our biases obstruct\n                            the quality and full potential of how we could read?\n                        </div>\n                    </li>\n                    <li>\n                        <div className={\"bullet-text\"}>\n                            It is effectively a cautionary tale against speed reading\n                            and making quick judgments.\n                        </div>\n                    </li>\n                    <li>\n                        <div className={\"bullet-text\"}>\n                            Because “Sweetness” is not only a rival short story to some\n                            extent, but also shares a similar theme with “Recitatif” (of\n                            fraught mother-daughter relations), its existence as—more or\n                            less—a foil to “Recitatif” also encourages a re-reading of\n                            “Recitatif.” In other words, its very existence in her\n                            oeuvre can’t help but compel us to ask the question: What,\n                            if anything, does this new short story have to do with\n                            Morrison’s <em>ur</em>-short story?\n                        </div>\n                    </li>\n                    <li>\n                        <div className={\"bullet-text\"}>\n                            As narrative time passes, the story’s two main characters,\n                            Roberta and Twyla—one of whom is the narrator—forget\n                            important details about a third main character, Maggie, as\n                            well as a childhood incident involving Maggie. Such memory\n                            lapses suggest their unreliability as the tellers of\n                            Maggie’s story and of the story of “Recitatif” itself, which\n                            puts the onus on the reader to be a more careful reader than\n                            they otherwise would have needed to be.\n                        </div>\n                    </li>\n                </ul>\n            </React.Fragment>\n        );\n\n        return (\n            <OverviewContent\n                content={content}\n                subtitle=\"The Reading Sample: Recitatif\"\n            />\n        );\n    }\n}\n\nexport class RereadingVisuals extends React.Component {\n    render() {\n        const content = (\n            <React.Fragment>\n                <h3>\n                    How does one represent a reader’s multiple readings of one text?\n                </h3>\n                <h3>\n                    How does one visualize a reader’s re-readings?\n                </h3>\n            </React.Fragment>\n        );\n        return (\n            <OverviewContent\n                content={content}\n                subtitle=\"Rereading Visuals\"\n            />\n        );\n    }\n}\n\nexport class RereadingValues extends React.Component {\n    render() {\n        const content = (\n            <React.Fragment>\n                <h3>What are the numbers and statistics saying about rereading?</h3>\n            </React.Fragment>\n        );\n        return (\n            <OverviewContent\n                content={content}\n                subtitle=\"Rereading Values\"\n            />\n        );\n    }\n}\n\nexport class QuantitativeQuestions extends React.Component {\n    render() {\n        const content = (\n            <React.Fragment>\n                <p>\n                    Since this story is an intentionally calculated attempt at crafting\n                    a very particular experience of reading, it prompts the question:\n                    What is the recipe for this narrative experiment’s success? Or, what\n                    exactly is the formula for this particular reading experience?\n                </p>\n                <p>So, here are some quantitative questions “Recitatif” raises:</p>\n                <ol>\n                    <li>\n                        How many stereotypical assumptions about racial identity\n                        constitute enough plausibility to keep the story going without\n                        arousing suspicion in the reader about the story’s intentions?\n                    </li>\n\n                    <li>\n                        What did Toni Morrison determine is the word-count threshold for\n                        such a narrative experiment? (In other words, not only did\n                        Morrison determine it had to be a short story but that it also\n                        had to be a very specific length.)\n                    </li>\n\n                    <li>\n                        How long can a writer sustain such a ruse? (In other words,\n                        what is the final length of the short story Morrison decided on\n                        after her own edits? *See Toni Morrison Papers.)\n                    </li>\n\n                    <li>\n                        How does the story’s structure of five “acts” help distract the\n                        reader from the story’s motives?\n                    </li>\n                    <li>\n                        How is editing a form of linear optimization, and how can linear\n                        optimization be applied to visualize Morrison’s editing process,\n                        which has resulted in the final version of the narrative\n                        structure and design of “Recitatif” available to readers since\n                        its publication in 1983?\n                    </li>\n\n                    <li>\n                        How do the story’s narrated time and narrative time\n                        contribute to the story’s plausibility?\n\n                        <br/>\n\n                        <u>Narrated time</u>: period of time covered by the narrative;\n                        the period of time during which the narrative is set.\n\n                        <br/>\n\n                        <u>Narrative time</u>: temporal structure of the narrative.\n                    </li>\n                </ol>\n            </React.Fragment>\n        );\n        return (\n            <OverviewContent\n                content={content}\n                subtitle=\"Quantitative Questions\"\n            />\n        );\n    }\n}\n\nexport class Sources extends React.Component {\n    render() {\n        const content = (\n            <React.Fragment>\n                <ul>\n                    <li>\n                        <div className=\"bullet-text\">\n                            Gavin, Michael. “Vector Semantics, William Empson,\n                            and the Study of Ambiguity,” <em>Critical Inquiry\n                            44</em>,\n                            Summer 2018.\n                        </div>\n                    </li>\n                    <li>\n                        <div className=\"bullet-text\">\n                            Morrison, Toni. <em>Playing in the Dark: Whiteness and\n                            the Literary Imagination</em>. Cambridge, MA: Harvard\n                            University Press, 1992. pp. xi.\n                        </div>\n                    </li>\n                    <li>\n                        <div className=\"bullet-text\">\n                            Morrison, Toni. “Recitatif.” <em>Confirmation: An\n                            Anthology\n                            of African American Women</em>, edited by Amiri Baraka\n                            (LeRoi Jones) and Amina Baraka. New York: Quill, 1983.\n                            pp. 243-261.\n                        </div>\n                    </li>\n                    <li>\n                        <div className=\"bullet-text\">\n                            Morrison, Toni. <em>Remember: The Journey to School\n                            Integration</em>. New York: Houghton Mifflin Company,\n                            2004.\n                        </div>\n                    </li>\n                    <li>\n                        <a\n                            href=\"https://www.newyorker.com/magazine/ 2015/02/09/sweetness-2\">\n                            <div className=\"bullet-text\">\n                                Morrison, Toni. “Sweetness,”\n                                <em>The New Yorker</em>,\n                                February 2, 2015.\n                            </div>\n                        </a>\n                    </li>\n                    <li>\n                        <div className=\"bullet-text\">\n                            Richard, I. A. “Introductory.” <em>Practical Criticism:\n                            A Study of Literary Judgment</em>. San Diego, New York,\n                            London: Harcourt Brace Jovanovich, 1962. pp. 3-16.\n                        </div>\n                    </li>\n\n                    <li>\n                        <div className=\"bullet-text\">\n                            Spacks, Patricia Meyer. <em>On Rereading</em>.\n                            Cambridge, Mass.: Belknap Press of Harvard University\n                            Press,\n                            2011.\n                        </div>\n                    </li>\n                    <li>\n                        <div className=\"bullet-text\">\n                            <em>Toni Morrison: The Pieces I am</em>. Directed by\n                            Timothy Greenfield-Sanders, Magnolia Pictures, 2019.\n                        </div>\n                    </li>\n                </ul>\n            </React.Fragment>\n        );\n        return (\n            <OverviewContent\n                content={content}\n                subtitle=\"Sources\"\n            />\n        );\n    }\n}\n\n\nexport class Writeups extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            writeups: null,\n        };\n    }\n\n    async componentDidMount() {\n        const url = '/api/writeups/';\n        const response = await fetch(url, {\n            headers: {\n                'Content-type': 'application/json',\n                'X-CSRFToken': this.csrftoken,\n            }\n        });\n        const response_json = await response.json();\n        this.setState({\n            writeups: response_json\n        });\n    }\n\n    render_one_writeup(writeup, i) {\n        const create_markup = (tagged_text) => {\n            return {\n                __html: tagged_text\n            };\n        };\n\n        return (\n            <div key={i} className=\"card mb-4\">\n                <div className=\"card-header\">\n                    <h5>{writeup.title} {writeup.title !== '' && 'by'} {writeup.author}</h5>\n                </div>\n                <div className=\"card-body\" dangerouslySetInnerHTML={create_markup(writeup.text)}/>\n            </div>\n        );\n    }\n\n    render() {\n        const content = (\n            <React.Fragment>\n                {this.state.writeups &&\n                    this.state.writeups.map(\n                        (writeup, i) => this.render_one_writeup(writeup, i)\n                    )\n                }\n            </React.Fragment>\n        );\n        return (\n            <OverviewContent\n                content={content}\n                subtitle=\"Student Reflections\"\n            />\n        );\n    }\n}\n\n/*\n\nfunction render_participate_btn() {\n    return (\n        <div className=\"row mt-4\"><div className=\"col text-center\">\n            <a\n                className={\"btn mx-auto btn-primary col-8\"}\n                href=\"/reading/\"\n            >Participate in our Study\n            </a>\n        </div></div>\n    );\n}\n\n */\n","import React from \"react\";\nimport {\n    SingleValueAnalysis,\n    RelevantWordPercentages,\n    TabularAnalysis,\n} from \"../prototype/analysis_view\";\nimport { Footer, Spinner } from \"../common\";\nimport PropTypes from 'prop-types';\n\nexport function formatTime(timeInSeconds, secondsRoundDigits) {\n    /*\n        Returns a string in the format \"x hours y minutes z seconds\".\n        Any quantities equal to zero will not be included unless the total time is 0 seconds.\n        If secondsRoundDigit is set, the seconds value will be rounded to that decimal place.\n     */\n    const SECONDS_PER_MINUTE = 60;\n    const SECONDS_PER_HOUR = 60 * SECONDS_PER_MINUTE;\n    let remainingTime = timeInSeconds;\n\n    let hours = Math.floor(remainingTime / SECONDS_PER_HOUR);\n    remainingTime %= SECONDS_PER_HOUR;\n    let minutes = Math.floor(remainingTime / SECONDS_PER_MINUTE);\n    remainingTime %= SECONDS_PER_MINUTE;\n    let seconds = remainingTime;\n\n    let hoursFormat = formatPluralUnits(hours, \"hour\");\n    let minutesFormat = formatPluralUnits(minutes, \"minute\");\n    let secondsFormat = formatPluralUnits(seconds, \"second\", secondsRoundDigits);\n\n    //Put the three units together\n    let finalFormat = \"\";\n    for (let str of [hoursFormat, minutesFormat, secondsFormat]) {\n        if (str !== \"\") {\n            finalFormat += str + \" \";\n        }\n    }\n    finalFormat = finalFormat.trim();\n\n    if (finalFormat === \"\") {\n        return \"0 seconds\";\n    }\n\n    return finalFormat;\n}\n\nfunction formatPluralUnits(value, singularUnit, roundDigits = undefined) {\n    /*\n    Formats units that can be singular or plural.\n    A value of zero will return an empty string.\n     */\n    let roundedValue;\n    if (roundDigits !== undefined) {\n        roundedValue = value.toFixed(roundDigits);\n    } else {\n        roundedValue = value;\n    }\n\n    if (roundedValue === 0) {\n        return \"\";\n    }\n\n    let formattedString = `${roundedValue} ${singularUnit}`;\n    if (value !== 1) {\n        formattedString += \"s\";\n    }\n    return formattedString;\n}\n\nexport class TimeAnalysis extends React.Component {\n    render() {\n        return (\n            <SingleValueAnalysis\n                header={this.props.header}\n                value={formatTime(this.props.time_in_seconds, this.props.round_digits)}\n                unit=\"\"\n            />\n        )\n    }\n}\nTimeAnalysis.propTypes = {\n    header: PropTypes.string,\n    time_in_seconds : PropTypes.number,\n    round_digits: PropTypes.number,\n};\n\nconst scroll_range_sort = (a, b) => {\n    const a_ranges = a.split(\" — \");\n    const b_ranges = b.split(\" — \");\n    const a_value = parseInt(a_ranges[1]);\n    const b_value = parseInt(b_ranges[1]);\n    return a_value - b_value;\n};\n\n/**\n * Sometimes, the backend data records some scroll ranges that go beyond the text so this is to\n * remove those inconsistencies.\n * @param scroll_ranges: a list of scroll ranges\n * @param heat_map: the heat map with scroll range as key and # seconds as value. (optional)\n */\nconst simplify_scroll_range = (scroll_ranges, heat_map) => {\n    let prev_scroll = 0;\n    const simplified_scroll_ranges = [];\n    for (let i = 0; i < scroll_ranges.length; i++){\n        const scroll_end = parseInt(scroll_ranges[i].split(\" — \")[1]);\n        if (scroll_end === prev_scroll + 500) {\n            prev_scroll = scroll_end;\n            simplified_scroll_ranges.push(scroll_ranges[i]);\n        }\n        else if (heat_map) {\n            delete heat_map[scroll_ranges[i]];\n        }\n    }\n    return simplified_scroll_ranges;\n};\n\nexport class HeatMapAnalysis extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.documents = [];\n        const all_segments = Object.keys(this.props.data);\n        for (let i = 0; i < all_segments.length; i++) {\n            const document_title = all_segments[i].split(\" \")[0];\n            if (!this.documents.includes(document_title)) {\n                this.documents.push(document_title);\n            }\n        }\n        this.state = {\n            document: null,\n            current_document: this.documents[0],\n            segment_num: 1,\n        };\n\n        this.handleSegmentChange = this.handleSegmentChange.bind(this);\n        this.handleDocumentChange = this.handleDocumentChange.bind(this);\n    }\n\n    async componentDidMount() {\n        try {\n            // Uses Promise to do multiple fetches at once\n            const response = await fetch('/api/documents/1/');\n            const document = await response.json();\n            this.setState({document});\n        } catch (e) {\n            // For now, just log errors to the console.\n            console.log(e);\n        }\n    }\n\n    handleSegmentChange(event) {\n        this.setState({segment_num: event.target.value});\n    }\n\n    handleDocumentChange(event) {\n        this.setState({current_document: event.target.value});\n    }\n\n    render() {\n        if (!this.state.document) {\n            return (\n                <div>Loading!</div>\n            );\n        }\n        const current_segment_data =\n            this.props.data[this.state.current_document + \" \" + this.state.segment_num];\n\n        let max_ranges = current_segment_data[\"reading\"];\n        if (Object.keys(current_segment_data[\"reading\"]).length <\n            Object.keys(current_segment_data[\"rereading\"]).length) {\n            max_ranges = current_segment_data[\"rereading\"];\n        }\n        let scroll_ranges = Object.keys(max_ranges);\n        scroll_ranges.sort(scroll_range_sort);\n        scroll_ranges = simplify_scroll_range(scroll_ranges);\n\n        const num_segments = Object.keys(this.props.data).length;\n        let range = n => Array.from(Array(n).keys());\n        let indices = range(num_segments+1).slice(1);\n\n        return (\n            <div>\n                <h3 className={\"mt-4\"}>\n                    Heat Map for &nbsp;\n                    <select\n                        value={this.state.current_document}\n                        className={\"segment-selector\"}\n                        onChange={(e) => this.handleDocumentChange(e)}\n                    >\n                        {this.documents.map((k, entry) => {\n                            return (\n                                <option key={k} value={this.documents[entry]}>\n                                    {this.documents[entry]}\n                                </option>\n                            )\n                        })}\n                    </select>\n                </h3>\n                Segment Number: &nbsp;\n                <select\n                    value={this.state.segment_num}\n                    className={\"segment-selector\"}\n                    onChange={(e) => this.handleSegmentChange(e)}\n                >\n                    {indices.map((k, entry) => {\n                        return (\n                            <option key={k} value={indices[entry]}>\n                                {indices[entry]}\n                            </option>\n                        )\n                    })}\n                </select>\n                <table className={\"table analysis-table\"}>\n                    <tbody>\n                        <tr>\n                            <th>Scroll Position</th>\n                            <th>Reading (seconds)</th>\n                            <th>Rereading (seconds)</th>\n                        </tr>\n                        {scroll_ranges.map( (k, range) => {\n                            range = scroll_ranges[range];\n                            return (\n                                <tr key={k}>\n                                    <th className={\"p-3\"}>\n                                        {range}\n                                    </th>\n                                    <td className={\"p-3\"}>\n                                        {current_segment_data[\"reading\"][range]}\n                                    </td>\n                                    <td className={\"p-3\"}>\n                                        {current_segment_data[\"rereading\"][range]}\n                                    </td>\n                                </tr>\n                            );\n                        })}\n                    </tbody>\n                </table>\n                <HeatMapSegment\n                    heatMap = {current_segment_data}\n                    text = {this.state.document.segments[this.state.segment_num - 1].text}\n                    segmentNum={1}\n                />\n            </div>\n        )\n    }\n}\n\nHeatMapAnalysis.propTypes = {\n    data: PropTypes.object,\n};\n\nclass HeatMapSegment extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            readType: \"reading\",\n            finalHeight: 500,\n        };\n        this.segment_ref = React.createRef();\n        this.handleReadingChange = this.handleReadingChange.bind(this);\n    }\n\n    handleReadingChange(event) {\n        this.setState({readType: event.target.value});\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {// eslint-disable-line no-unused-vars\n        const segment_height = this.segment_ref.current.scrollHeight;\n        const heat_data = this.props.heatMap[this.state.readType];\n        const scroll_ranges = Object.keys(heat_data);\n        scroll_ranges.sort(scroll_range_sort);\n        const max_scroll_range = scroll_ranges[scroll_ranges.length - 1];\n        const height = 500 + segment_height -\n                parseInt(max_scroll_range.split(\" — \")[1]);\n        if (this.state.finalHeight !== height) {\n            this.setState({finalHeight: height});\n        }\n    }\n\n    componentDidMount() {\n        this.setState({readType:\"reading\"});\n    }\n\n    render() {\n        const segment_lines = this.props.text.split(\"\\r\\n\");\n        const heat_data = this.props.heatMap[this.state.readType];\n        let scroll_ranges = Object.keys(heat_data);\n        scroll_ranges.sort(scroll_range_sort);\n        scroll_ranges = simplify_scroll_range(scroll_ranges, heat_data);\n        const max_scroll_range = scroll_ranges[scroll_ranges.length - 1];\n\n        const max_heat = Math.max(...Object.values(heat_data));\n        // The intensity of the heat map is determined by the amount of seconds spent viewing that\n        // section divided by the maximum time spent viewing any of the sections of that segment\n        const heat_map = Object.keys(heat_data).map(range => {\n            return {\n                start: range.split(\" — \")[0],\n                percentage: 0.6 * heat_data[range] / max_heat,\n                range: range,\n            }\n        });\n\n        return (\n            <div>\n                This is the heat map for: &nbsp;\n                <select\n                    value={this.state.readType}\n                    className={\"segment-selector\"}\n                    onChange={(e) => this.handleReadingChange(e)}\n                >\n                    <option value={\"reading\"}>reading</option>\n                    <option value={\"rereading\"}>rereading</option>\n                </select>\n                <div\n                    className=\"segment\"\n                    ref={this.segment_ref}\n                >\n                    {segment_lines.map(\n                        (line, k) => (<p className={\"segment-text text-justify\"} key={k}>{line}</p>)\n                    )}\n                    {heat_map.map((heat, i) => {\n                        return (\n                            <div\n                                style={{\n                                    position: \"absolute\",\n                                    height: heat.range === max_scroll_range ?\n                                        this.state.finalHeight + \"px\" :\n                                        \"500px\",\n                                    width: \"593px\",\n                                    top: heat.start + \"px\",\n                                    backgroundColor: \"rgba(255, 0, 0,\" + heat.percentage + \")\",\n                                    zIndex: -1,\n                                }}\n                                key={i}\n                            >\n                            </div>\n                        );\n                    })}\n                </div>\n            </div>\n        );\n    }\n}\nHeatMapSegment.propTypes = {\n    text: PropTypes.string,\n    heatMap: PropTypes.object,\n    segmentNum: PropTypes.number,\n};\n\nexport class AnalysisView extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // we initialize analysis to null, so we can check in render() whether\n            // we've received a response from the server yet\n            analysis: null,\n            document: null,\n        };\n    }\n\n    /**\n     * This function is fired once this component has loaded into the DOM.\n     * We send a request to the backend for the analysis data.\n     */\n    async componentDidMount() {\n        try {\n            const response = await fetch('/api/analysis/');\n            const analysis = await response.json();\n            this.setState({analysis});\n        } catch (e) {\n            // For now, just log errors to the console.\n            console.log(e);\n        }\n    }\n\n    render() {\n        if (this.state.analysis === null) {\n            return <Spinner />;\n        }\n\n        const { // object destructuring:\n            total_and_median_view_time,\n            mean_reading_vs_rereading_time,\n            get_number_of_unique_students,\n            percent_using_relevant_words_by_question,\n            get_all_heat_maps,\n            all_responses,\n            most_common_words_by_question,\n        } = this.state.analysis;\n\n        const sort_responses = (a, b) => {\n            const a_sequence = a[0];\n            const a_question_number = a[1];\n            const b_sequence = b[0];\n            const b_question_number = b[1];\n\n            if (a_sequence === b_sequence) {\n                if (a_question_number < b_question_number) {\n                    return -1;\n                } else {\n                    return 1;\n                }\n            } else if (a_sequence < b_sequence) {\n                return -1;\n            }\n\n            return 1;\n        };\n\n        const sorted_all_responses = all_responses.sort(sort_responses);\n\n        return (\n            <>\n                <div className={\"container\"}>\n                    <h1\n                        className={\"text-center display-4 mb-4\"}\n                        id={\"page-title\"}\n                    >Analysis of Student Responses</h1>\n                    <TimeAnalysis\n                        header={\"Total view time\"}\n                        time_in_seconds={total_and_median_view_time[0]}\n                    />\n                    <TimeAnalysis\n                        header={\"Median view time\"}\n                        time_in_seconds={total_and_median_view_time[1]}\n                    />\n                    <TimeAnalysis\n                        header={\"Mean reading view time\"}\n                        time_in_seconds={mean_reading_vs_rereading_time[0]}\n                    />\n                    <TimeAnalysis\n                        header={\"Mean rereading view time\"}\n                        time_in_seconds={mean_reading_vs_rereading_time[1]}\n                    />\n                    <SingleValueAnalysis\n                        header={\"Number of Unique Students\"}\n                        value={get_number_of_unique_students}\n                        unit={\"students\"}\n                    />\n                    <HeatMapAnalysis\n                        data={get_all_heat_maps}\n                    />\n                    <RelevantWordPercentages\n                        words={percent_using_relevant_words_by_question[0]}\n                        entryData={percent_using_relevant_words_by_question[1]}\n                    />\n                    <TabularAnalysis\n                        title=\"Top Words by Question\"\n                        headers={[\n                            \"Segment Number\",\n                            \"Question Number\",\n                            \"Question Text\",\n                            \"Top Words\"\n                        ]}\n                        data={most_common_words_by_question}\n                    />\n                    <TabularAnalysis\n                        title=\"All Student Responses\"\n                        headers={[\n                            \"Segment Number\",\n                            \"Question Number\",\n                            \"Question Text\",\n                            \"Response\",\n                            \"Evidence\",\n                        ]}\n                        data={sorted_all_responses}\n                    />\n                </div>\n                <Footer />\n            </>\n        );\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.scss'\n\nimport { PrototypeStudentView } from './prototype/student_view';\nimport { PrototypeInstructorView } from './prototype/instructor_view';\nimport { PrototypeAnalysisView } from './prototype/analysis_view';\n\nimport { ReadingView } from './views/reading_view';\nimport { LandingPageView } from './views/landing_page';\n\nimport {\n    ReadingRedux,\n    RereadingSample,\n    RereadingVisuals,\n    RereadingValues,\n    QuantitativeQuestions,\n    Sources,\n    Writeups,\n} from './views/overview_view';\n\nimport { AnalysisView } from './views/analysis_view';\nwindow.app_modules = {\n    React,  // Make React accessible from the base template\n    ReactDOM,  // Make ReactDOM accessible from the base template\n\n    // Add all frontend views here\n    ReadingView,\n    AnalysisView,\n    ReadingRedux,\n    RereadingSample,\n    RereadingVisuals,\n    RereadingValues,\n    QuantitativeQuestions,\n    Sources,\n    Writeups,\n    LandingPageView,\n\n    // Prototype views\n    PrototypeAnalysisView,\n    PrototypeStudentView,\n    PrototypeInstructorView,\n};\n\n"],"sourceRoot":""}